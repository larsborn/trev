# trev.pod
# Follows http://perldoc.perl.org/perlpodstyle.html

=head1 NAME

trev.pl - carries out taskwarrior tasks reviewing

=head1 SYNOPSIS

perl trev.pl [++seltag] [start+] [filter]

=head1 DESCRIPTION

trev tries to be sort of a mini-shell focusing on taskwarrior reviewing.

This script reads a list of pending taskwarrior (http://taskwarrior.org/) tasks and presents them to the user one at a time, prompting for an action --among a restricted set of taskwarrior commands; this action (or none) is performed on the task, whereupon the script proceeds to the next task up to the end of the list.

At the script prompt the user can also include the current into a set of selected tasks which is continously shown. Tasks into this set are marked by taskwarrior as active or with a certain tag chosen by the user.

List comes from a system call to task, obeying then the user preferred settings for visibility, order, decoration...

=head1 OPTIONS

=head2 ARGUMENTS

No argument is required. Optional arguments can be issued to set a selection tag, a task number for the review to start and/or a taskwarrior filter.

=over

=item [++seltag]

If first argument starts with '++', as in 'trev.pl ++seltag', selection tag will be set to '+seltag', selecting action to 'modify +seltag' and unselecting action to 'modify -seltag'. Double '+' is required in order to distinguish from a regular tag intended to be used as a filter. If not set, default selection tag is 'active', selecting action is 'start' and unselecting action is 'stop'.

=item [start+]

A numeric argument ending in '+' as in 'trev.pl 113+' requests the script to start reviewing at task number 113, and proceed to the end of the list. This can be useful when resuming an interrupted long review. Final '+' is required in order to distinguish from a just-one-task filter, like in 'trev.pl 113'. 

=item [filter]

A taskwarrior filter can be passed to the script alone or following other arguments. Not all filters are correctly interpreted.

=back

Order is mandatory: if a selection tag is specified it must be issued as the first argument; starting task number can be first (if no selection tag) or second (first is selection tag). Filter can go in third, second or first place, depending if none or other(s) argument(s) appear. 

=head3 EXAMPLES

=over

=item trev.pl ++week 113+ pro:wp5

Set selection tag to +week, start reviewing at task 113 and process only tasks appertaining to a certain wp5 project.

=item trev.pl ++calendula +ate_loops

Select/deselect using 'modify +/-calendula'. Only ate_loops tagged tasks.

=item trev.pl 113+ due:

Processes only tasks without a due date. Start at task 113. Select/deselect with start/stop and starts at the top of the list (defaults).

=item trev.pl 113

Review just task 113. Start/stop for select/deselect (default).

=item trev.pl amsterdam

Review every task containing amsterdam in its description, starting at the top of the list and selecting with start/stop. 

=back

=head2 OPTIONS AT THE SCRIPT PROMPT

(add, annotate, append, calendar, delete, denotate, done, edit, information, log, modify, prepend, start and stop, apart of version, but see ACTIONS below) At the prompt following actions can be issued:

Issuing - at the prompt the current task is extracted from the set.

=over 4

=item [RET]

  [RETURN] or void line. Proceeds to the next task.

=item b

  Proceeds to the previous task.

=item +

  Marks task as selected and made it part of the bag.

=item -

  Deselects task and take it out of the bag. If followed by a number, as in '-156', action is applied to the referred task number, not to current.


=back

=head1 DEPENDENCIES

Some ship with perl:
    Term::ANSIColor;       Color screen output using ANSI escape sequences.
    Term::ReadLine;        Perl interface to various readline packages.
    Term::ReadLine::Gnu;   Perl extension for the GNU Readline/History Library.
    Term::UI;              Term::ReadLine UI made easy.
    Term::ReadKey;         MSWindows?

=head1 CONFIGURATION

L10N

=head1 RETURN VALUE

What the program or function returns, if successful. This section can be omitted for programs whose precise exit codes aren't important, provided they return 0 on success and non-zero on failure as is standard. It should always be present for functions. For modules, it may be useful to summarize return values from the module interface here, or it may be more useful to discuss return values separately in the documentation of each function or method the module provides.

=head1 ERRORS

Exceptions, error return codes, exit statuses, and errno settings. Typically used for function or module documentation; program documentation uses DIAGNOSTICS instead. The general rule of thumb is that errors printed to STDOUT  or STDERR  and intended for the end user are documented in DIAGNOSTICS while errors passed internal to the calling program and intended for other programmers are documented in ERRORS. When documenting a function that sets errno, a full list of the possible errno values should be given here.

=head1 DIAGNOSTICS

All possible messages the program can print out and what they mean. You may wish to follow the same documentation style as the Perl documentation; see perldiag(1) for more details (and look at the POD source as well).

If applicable, please include details on what the user should do to correct the error; documenting an error as indicating "the input buffer is too small" without telling the user how to increase the size of the input buffer (or at least telling them that it isn't possible) aren't very useful.

=head1 EXAMPLES

Give some example uses of the program or function. Don't skimp; users often find this the most useful part of the documentation. The examples are generally given as verbatim paragraphs.

Don't just present an example without explaining what it does. Adding a short paragraph saying what the example will do can increase the value of the example immensely.

    perl trev.pl pro:svn
    perl trev.pl due:
    perl trev.pl 113
    perl trev.pl oldest
    perl trev.pl amsterdam

=head1 ENVIRONMENT

Environment variables that the program cares about, normally presented as a list using =over , =item , and =back . For example:
Since environment variables are normally in all uppercase, no additional special formatting is generally needed; they're glaring enough as it is.

=head1 FILES

All files used by the program or function, normally presented as a list, and what it uses them for. File names should be enclosed in F<>. It's particularly important to document files that will be potentially modified.

=head1 CAVEATS

Things to take special care with, sometimes called WARNINGS.

=head1 BUGS

Plenty.
Things that are broken or just don't work quite right.

=head1 RESTRICTIONS

Bugs you don't plan to fix. :-)

=head1 NOTES

Miscellaneous commentary.

=head1 AUTHOR

nocejo E<lt>nocejo at example.fakeE<gt>.

=head1 COPYRIGHT AND LICENSE

For copyright

   1. Copyright YEAR(s) YOUR NAME(s)

(No, (C) is not needed. No, "all rights reserved" is not needed.)

For licensing the easiest way is to use the same licensing as Perl itself:

   1. This library is free software; you may redistribute it and/or modify
   2. it under the same terms as Perl itself.

This makes it easy for people to use your module with Perl. Note that this licensing example is neither an endorsement or a requirement, you are of course free to choose any licensing.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


=head1 DATE

9-Apr-2013

=cut


